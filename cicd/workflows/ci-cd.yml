name: Build and Trigger Infrastructure Update

on:
  # メインと開発ブランチへのpush、またはプルリクエストで実行
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: laravel-app

jobs:
  # PHP/Laravel テスト: アプリケーションの健全性を検証
  php-tests:
    name: "PHP/Laravel Tests"
    runs-on: ubuntu-latest
    
    # テスト環境のセットアップ
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: laravel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP and Composer
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_pgsql, bcmath, soap, intl, gd, exif, iconv, imagick, mecab
        coverage: xdebug
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: composer-
    
    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader
    
    - name: Prepare environment
      run: |
        cp .env.example .env
        php artisan key:generate
        echo "DB_CONNECTION=pgsql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_DATABASE=laravel_test" >> .env
        echo "DB_USERNAME=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
    
    - name: Run database migrations
      run: php artisan migrate --force
    
    - name: Run static analysis (PHPStan)
      run: vendor/bin/phpstan analyse
    
    - name: Run unit tests (PHPUnit)
      run: vendor/bin/phpunit --coverage-clover coverage.xml

  # フロントエンド・SSRテスト: Vue.jsとInertiaのビルドとテスト
  frontend-ssr-tests:
    name: "Frontend & SSR Tests"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Run linter (ESLint) and formatter (Prettier) checks
      run: |
        npm run lint
        npm run format:check
    
    - name: Run TypeScript check
      run: npm run type-check
    
    - name: Build client assets
      run: npm run build
    
    - name: Build SSR bundle
      run: npm run build:ssr
    
    - name: Verify build outputs
      run: |
        if [ ! -d "public/build" ]; then
          echo "❌ Client build failed - public/build not found"
          exit 1
        fi
        if [ ! -f "bootstrap/ssr/ssr.js" ]; then
          echo "❌ SSR build failed - bootstrap/ssr/ssr.js not found"
          exit 1
        fi
        echo "✅ Both client and SSR builds successful"
        ls -la public/build/
        ls -la bootstrap/ssr/
    
    - name: Test SSR bundle execution
      run: |
        cd bootstrap/ssr
        echo "🧪 Testing SSR bundle..."
        timeout 5s node ssr.js || [[ $? == 124 ]] && echo "✅ SSR bundle executable" || echo "❌ SSR bundle failed"

  # セキュリティ監査: 依存関係の脆弱性をチェック
  security-audit:
    name: "Security Audit"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
    
    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader
    
    - name: Run Composer security audit
      run: composer audit
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=high

  # Dockerイメージのビルド・プッシュ、およびデプロイのトリガー
  # すべてのテストが成功した場合にのみ実行
  build-push-and-deploy:
    name: "Build, Push & Trigger Deployment"
    needs: [php-tests, frontend-ssr-tests, security-audit]
    runs-on: ubuntu-latest
    # pushイベント時のみデプロイをトリガー
    if: github.event_name == 'push'
    
    outputs:
      image-uri: ${{ steps.image.outputs.image-uri }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🔨 Building Docker image with SSR support..."
        
        # Dockerイメージをビルド
        docker build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
        
        echo "📦 Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "✅ Image pushed successfully"
        echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Verify image contents
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🔍 Verifying built image contents..."
        docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ls -la /var/www/public/build/
        docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ls -la /var/www/bootstrap/ssr/
        echo "✅ Image verification completed"

    - name: Set image URI output
      id: image
      run: |
        echo "image-uri=${{ steps.build-image.outputs.image-uri }}" >> $GITHUB_OUTPUT

    # Terraformリポジトリにrepository_dispatchを送信し、インフラデプロイをトリガー
    # アプリケーションリポジトリはビルドの責任のみを負い、デプロイはインフラリポジトリに委譲
    - name: Trigger Infrastructure Deployment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.IAC_REPO_PAT }}
        script: |
          const imageUri = "${{ steps.image.outputs.image-uri }}";
          const branch = context.ref.replace('refs/heads/', '');
          const repository = context.repo.repo;
          const commitSha = context.sha;
          
          console.log('🚀 Triggering infrastructure deployment...');
          console.log(`Image URI: ${imageUri}`);
          console.log(`Branch: ${branch}`);
          console.log(`Repository: ${repository}`);
          console.log(`Commit SHA: ${commitSha}`);
          
          await github.rest.repos.createDispatchEvent({
            owner: '${{ secrets.IAC_REPO_OWNER }}',
            repo: '${{ secrets.IAC_REPO_NAME }}',
            event_type: 'ecr-image-updated',
            client_payload: {
              container_image: imageUri,
              branch: branch,
              repository: repository,
              commit_sha: commitSha,
              triggered_at: new Date().toISOString(),
              trigger_workflow_run_id: '${{ github.run_id }}'
            }
          });
          
          console.log('✅ Infrastructure deployment triggered successfully');

    # ビルド結果の通知（GitHubコメントとSlack）
    # デプロイはインフラリポジトリで進行するため、ここではビルドの成功/失敗のみを通知
    - name: Notify build completion
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const status = '${{ job.status }}';
          const environment = '${{ github.ref == "refs/heads/main" && "Production" || "Staging" }}';
          const imageUri = '${{ steps.image.outputs.image-uri }}';
          const commitUrl = `${context.payload.repository.html_url}/commit/${context.sha}`;
          
          if (status === 'success') {
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `📦 **Application Build Successful!**\n\n` +
                      `✅ **Status:** Build and ECR push completed\n` +
                      `🖼️ **Image:** \`${imageUri}\`\n` +
                      `🌐 **Target Environment:** ${environment}\n` +
                      `🚀 **Infrastructure Deployment:** Triggered\n` +
                      `⏱️ **Built at:** ${new Date().toISOString()}\n\n` +
                      `Infrastructure deployment is now in progress. You'll receive another notification when complete.\n\n` +
                      `[View commit](${commitUrl})`
            });
          } else {
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `❌ **Application Build Failed!**\n\n` +
                      `🚨 **Status:** Build or ECR push encountered errors\n` +
                      `🌐 **Target Environment:** ${environment}\n` +
                      `🔍 **Logs:** [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})\n` +
                      `⏱️ **Failed at:** ${new Date().toISOString()}\n\n` +
                      `Please check the workflow logs for detailed error information.`
            });
          }

    - name: Slack build notification
      if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          ${{ job.status == 'success' && '📦' || '❌' }} ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }} Build ${{ job.status == 'success' && 'Successful' || 'Failed' }}
          
          🖼️ Image: ${{ steps.image.outputs.image-uri }}
          🌐 Repository: ${{ github.repository }}
          🔗 Commit: ${{ github.sha }}
          ${{ job.status == 'success' && '🚀 Infrastructure deployment triggered' || '🚨 Build failed - no deployment triggered' }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}